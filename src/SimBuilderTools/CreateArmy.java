/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package SimBuilderTools;

import UnitFormations.GridFormation;
import battlesimulator.Geography.StartingPosition;
import battlesimulator.Military.Army;
import battlesimulator.Military.General;
import battlesimulator.Military.Officer;
import battlesimulator.Military.Soldier;
import battlesimulator.Military.Unit;
import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

/**
 *
 * @author Arlo
 */
public class CreateArmy extends AbstractCreationPanel<Army> implements CreatorListener
{

    Army army;
    Unit selectedUnit;
    static Map<String, Color> stringToColorMap;
    static Map<Color, String> colorToStringMap;

    ArrayList<CreateUnit> createUnitsList = new ArrayList<>();
    HashMap<String, StartingPosition> startingPositions = new HashMap<>();
    //set color map

    static
    {
        stringToColorMap = new HashMap<>();
        stringToColorMap.put("Red", Color.RED);
        stringToColorMap.put("Blue", Color.BLUE);
        stringToColorMap.put("Green", Color.GREEN);
        stringToColorMap.put("Purple", Color.MAGENTA);
        stringToColorMap.put("Black", Color.BLACK);
        stringToColorMap.put("Gray", Color.GRAY);
        stringToColorMap.put("Cyan", Color.CYAN);
        stringToColorMap.put("Orange", Color.ORANGE);

        colorToStringMap = new HashMap<>();
        colorToStringMap.put(Color.RED, "Red");
        colorToStringMap.put(Color.BLUE, "Blue");
        colorToStringMap.put(Color.GREEN, "Green");
        colorToStringMap.put(Color.MAGENTA, "Purple");
        colorToStringMap.put(Color.BLACK, "Black");
        colorToStringMap.put(Color.GRAY, "Gray");
        colorToStringMap.put(Color.CYAN, "Cyan");
        colorToStringMap.put(Color.ORANGE, "Orange");

    }

    /**
     * Creates new form SetArmy
     */
    public CreateArmy()
    {
        initComponents();
        this.comboStartingPosition.removeAllItems();
    }

    public CreateArmy(String name)
    {
        this();
        this.fldAllegiance.setText(name);
    }

    public Army getArmy()
    {
        return army;
    }

    public void setStartingPositions(HashMap<String, StartingPosition> startingPositions)
    {
        this.startingPositions = startingPositions;
        this.comboStartingPosition.removeAllItems();
        for (Entry<String, StartingPosition> position : this.startingPositions.entrySet())
        {
            this.comboStartingPosition.addItem(position.getKey());
        }
        if (this.army != null)
        {
            for (int index = 0; index < this.comboStartingPosition.getItemCount(); index++)
            {
                if (this.comboStartingPosition.getItemAt(index).toString().equals(this.army.getStartingPositionName()))
                {
                    this.comboStartingPosition.setSelectedIndex(index);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jColorChooser1 = new javax.swing.JColorChooser();
        jLabel1 = new javax.swing.JLabel();
        createGeneralPanel = new SimBuilderTools.CreateGeneral();
        unitsPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnAddUnit = new javax.swing.JButton();
        armyBasicsPanel = new javax.swing.JPanel();
        comboColor = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        comboStartingPosition = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        fldAllegiance = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnDeleteArmy = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblArmyScore = new javax.swing.JLabel();
        tabbedUnitPane = new javax.swing.JTabbedPane();

        jLabel1.setText("General:");

        createGeneralPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        unitsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Units");

        btnAddUnit.setText("Add Unit");
        btnAddUnit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddUnitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout unitsPanelLayout = new javax.swing.GroupLayout(unitsPanel);
        unitsPanel.setLayout(unitsPanelLayout);
        unitsPanelLayout.setHorizontalGroup(
            unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unitsPanelLayout.createSequentialGroup()
                .addGroup(unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(unitsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAddUnit)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        unitsPanelLayout.setVerticalGroup(
            unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unitsPanelLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(btnAddUnit)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        comboColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Red", "Blue", "Green", "Black", "Purple", "Cyan", "Yellow", "Orange", "Gray", " " }));

        jLabel5.setText("Color");

        comboStartingPosition.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Allegiance");

        fldAllegiance.setText("allegiance");
        fldAllegiance.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fldAllegianceActionPerformed(evt);
            }
        });
        fldAllegiance.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                fldAllegianceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                fldAllegianceKeyReleased(evt);
            }
        });

        jLabel3.setText("Starting Position");

        btnDeleteArmy.setText("DeleteArmy");
        btnDeleteArmy.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDeleteArmyActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Army Score:");

        lblArmyScore.setText("0");

        javax.swing.GroupLayout armyBasicsPanelLayout = new javax.swing.GroupLayout(armyBasicsPanel);
        armyBasicsPanel.setLayout(armyBasicsPanelLayout);
        armyBasicsPanelLayout.setHorizontalGroup(
            armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(armyBasicsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(armyBasicsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fldAllegiance, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(armyBasicsPanelLayout.createSequentialGroup()
                                .addComponent(comboColor, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(armyBasicsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                                .addComponent(btnDeleteArmy))))
                    .addGroup(armyBasicsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboStartingPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblArmyScore)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        armyBasicsPanelLayout.setVerticalGroup(
            armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(armyBasicsPanelLayout.createSequentialGroup()
                .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(armyBasicsPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(fldAllegiance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, armyBasicsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(btnDeleteArmy))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboStartingPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(armyBasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(lblArmyScore)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(armyBasicsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(createGeneralPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addComponent(unitsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tabbedUnitPane)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(armyBasicsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabbedUnitPane)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createGeneralPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 204, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unitsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUnitActionPerformed
        int unitNameSuffix = 0;
        String unitName = "unit" + unitNameSuffix;
        String allegience = this.army != null ? this.army.getAllegiance() : this.fldAllegiance.getText();
        boolean uniqueName = false;
        while (!uniqueName)
        {
            uniqueName = true;
            unitName = "unit" + unitNameSuffix;
            for (CreateUnit createUnit : this.createUnitsList)
            {
                uniqueName &= (!createUnit.getCurrentUnitName().equals(unitName));
            }

            unitNameSuffix++;
        }
        Officer officer = new Officer(allegience, unitName);
        GridFormation formation = new GridFormation(unitName, new Point(0, 0), 0, 5, Soldier.getPersonalSpace(), 5);
        Unit unit = new Unit(officer, formation, Color.BLACK, allegience, unitName);
        CreateUnit createUnit = new CreateUnit(this.army);
        this.createUnitsList.add(createUnit);
        this.tabbedUnitPane.addTab(unitName, createUnit);
        createUnit.addListener(this);

        createUnit.setObject(unit);


    }//GEN-LAST:event_btnAddUnitActionPerformed

    private void fldAllegianceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fldAllegianceActionPerformed
    {//GEN-HEADEREND:event_fldAllegianceActionPerformed
        // TODO add your handling code here:
        this.notifyListeners();
    }//GEN-LAST:event_fldAllegianceActionPerformed

    private void fldAllegianceKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_fldAllegianceKeyPressed
    {//GEN-HEADEREND:event_fldAllegianceKeyPressed

    }//GEN-LAST:event_fldAllegianceKeyPressed

    private void fldAllegianceKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_fldAllegianceKeyReleased
    {//GEN-HEADEREND:event_fldAllegianceKeyReleased
        this.notifyListeners();
    }//GEN-LAST:event_fldAllegianceKeyReleased

    private void btnDeleteArmyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteArmyActionPerformed
    {//GEN-HEADEREND:event_btnDeleteArmyActionPerformed
        this.isDeleted = true;
        this.notifyListeners();;
    }//GEN-LAST:event_btnDeleteArmyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel armyBasicsPanel;
    private javax.swing.JButton btnAddUnit;
    private javax.swing.JButton btnDeleteArmy;
    private javax.swing.JComboBox comboColor;
    private javax.swing.JComboBox comboStartingPosition;
    private SimBuilderTools.CreateGeneral createGeneralPanel;
    private javax.swing.JTextField fldAllegiance;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblArmyScore;
    private javax.swing.JTabbedPane tabbedUnitPane;
    private javax.swing.JPanel unitsPanel;
    // End of variables declaration//GEN-END:variables

    public String getArmyName()
    {
        String name = "";
        if (army != null)
        {
            name = army.getAllegiance();
        } else
        {
            name = this.fldAllegiance.getText();
        }

        if (name.isEmpty())
        {
            name = this.fldAllegiance.getText();
        }
        return name;
    }

    @Override
    public Army buildObject()
    {
        Color color = stringToColorMap.get(this.comboColor.getSelectedItem());
        Army newArmy = new Army(color, this.fldAllegiance.getText());
        String positionName = (String) this.comboStartingPosition.getSelectedItem();
        StartingPosition position = this.startingPositions.get(positionName);
        newArmy.setStartingPosition(positionName, position.getCornerPoint());
        General general = this.createGeneralPanel.buildObject();
        general.setAllegiance(this.fldAllegiance.getText());
        general.setColor(color);
        newArmy.setGeneral(this.createGeneralPanel.buildObject());
        int x = newArmy.getGeneralPoint().x;
        int y = newArmy.getGeneralPoint().y;
        //start at the general postion and move from there.

        for (CreateUnit createUnit : this.createUnitsList)
        {
            Point unitPoint = new Point(x, y);
            createUnit.setArmy(newArmy);
            Unit unit = createUnit.buildObject();
            newArmy.addUnit(unit);
            unit.getDefaultFormation().setFormationOrigin(unitPoint);

            unit.getOfficer().setColor(color);
            unit.getOfficer().setAllegiance(this.fldAllegiance.getText());
            unit.getOfficer().setCenterPoint(unitPoint);

            for (Soldier soldier : unit.getSoldiers())
            {
                soldier.setPointInFormation();
                soldier.setAllegiance(this.fldAllegiance.getText());
                soldier.setColor(color);

            }
//             x += (int)unit.getMetrics().getWidth();
            y += (int) unit.getStateAlbum().getLatestMetrics().getHeight();
        }
        this.army = newArmy;

        return this.army;
    }

    @Override
    public void setObject(Army object)
    {
        this.army = object;
        this.createUnitsList.clear();
        for (Unit unit : object.getUnits())
        {
            CreateUnit createUnit = new CreateUnit(this.army);
            this.createUnitsList.add(createUnit);
            this.tabbedUnitPane.addTab(createUnit.getUnitName(), createUnit);
            this.selectedUnit = null;

            createUnit.addListener(this);
            createUnit.setObject(unit);

        }

        this.fldAllegiance.setText(this.army.getAllegiance());
        this.comboColor.setSelectedItem(colorToStringMap.get(this.army.getColor()));
        General general = this.army.getGeneral();
        this.createGeneralPanel.setObject(general);

        for (int index = 0; index < this.comboStartingPosition.getItemCount(); index++)
        {
            if (this.comboStartingPosition.getItemAt(index).toString().equals(this.army.getStartingPositionName()))
            {
                this.comboStartingPosition.setSelectedIndex(index);
            }
        }

    }

    @Override
    public void Save()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void Load()
    {
    }

    @Override
    public boolean Validate()
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void updateGUI()
    {
        int armyScore = 0;
        for (int index = 0; index < this.tabbedUnitPane.getTabCount(); index++)
        {
            CreateUnit unitOnTab = (CreateUnit) this.tabbedUnitPane.getComponentAt(index);

            armyScore += unitOnTab.getUnitScore();
            this.tabbedUnitPane.setTitleAt(index, unitOnTab.getCurrentUnitName());

            if (unitOnTab.isDeleted())
            {
                this.createUnitsList.remove(unitOnTab);
                this.tabbedUnitPane.remove(index);
            }
        }
        this.lblArmyScore.setText("" + armyScore);
        for (int index = 0; index < this.comboStartingPosition.getItemCount(); index++)
        {
            if (this.army != null
                    && this.army.getStartingPositionName() != null
                    && this.comboStartingPosition.getItemAt(index).toString().equals(this.army.getStartingPositionName()))
            {
                this.comboStartingPosition.setSelectedIndex(index);
            }
        }

    }
}
