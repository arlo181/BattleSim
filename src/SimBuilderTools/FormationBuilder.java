/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package SimBuilderTools;

import UnitFormations.BaseUnitFormation;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

/**
 *
 * @author Arlo
 */
public class FormationBuilder extends javax.swing.JFrame {

    ArrayList<Point> points;
    Point officerPoint;
    double radius;

    /**
     * Creates new form FormationBuilder
     */
    public FormationBuilder() {
        initComponents();
        points = new ArrayList<>();
        this.officerPoint = null;
        radius = 3;
        this.saveButton.setEnabled(false);
        // timer.start();
    }

    public void paintFormationsPanel() {
        BufferedImage formationImage =
                new BufferedImage(this.formationPanel.getWidth(),
                this.formationPanel.getHeight(), BufferedImage.TYPE_USHORT_555_RGB);
        Graphics2D g2 = formationImage.createGraphics();

        Rectangle fieldOutline = new Rectangle(0, 0, this.formationPanel.getWidth(),
                this.formationPanel.getHeight());
        g2.setColor(Color.WHITE);
        g2.draw(fieldOutline);

        g2.fill(fieldOutline);
        //this.formationPanel.repaint();
        g2.setColor(Color.BLACK);
        for (Point point : points) {

            Ellipse2D elipse = new Ellipse2D.Double(point.x, point.y, 2 * radius, 2 * radius);
            g2.draw(elipse);
            g2.fill(elipse);
        }
        g2.setColor(Color.red);
        if (this.officerPoint != null) {
            Ellipse2D elipse = new Ellipse2D.Double(this.officerPoint.x, this.officerPoint.y, 2 * radius, 2 * radius);
            g2.draw(elipse);
            g2.fill(elipse);

        }

        this.formationPanel.getGraphics().drawImage(formationImage, 0, 0, null);
        this.pointCount.setText("" + this.points.size());
        this.enableSave();
    }

    public void enableSave() {
        boolean enableSave = this.officerPoint != null
                && this.points.size() > 0
                && this.fileNameField.getText().length() > 0;
        this.saveButton.setEnabled(enableSave);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formationPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        fileNameField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        pointCount = new javax.swing.JLabel();
        snapToGrid = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        formationPanel.setBackground(new java.awt.Color(255, 255, 255));
        formationPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formationPanelMouseClicked(evt);
            }
        });
        formationPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formationPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout formationPanelLayout = new javax.swing.GroupLayout(formationPanel);
        formationPanel.setLayout(formationPanelLayout);
        formationPanelLayout.setHorizontalGroup(
            formationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        formationPanelLayout.setVerticalGroup(
            formationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        fileNameField.setText("testFormation");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        pointCount.setText("0");

        snapToGrid.setText("SnapToGrid");
        snapToGrid.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(snapToGrid)
                    .addComponent(pointCount))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(formationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(pointCount)
                .addGap(18, 18, 18)
                .addComponent(snapToGrid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPoint(int x, int y, int modifiers) {
        Point pointToAdd = new Point(x, y);

        if (this.snapToGrid.isSelected()) {
            pointToAdd.x = pointToAdd.x - (int) Math.round(pointToAdd.x % (4 * this.radius));
            pointToAdd.y = pointToAdd.y - (int) Math.round(pointToAdd.y % (4 * this.radius));

        }

        if ((modifiers & InputEvent.SHIFT_MASK) != 0 && !conflict(pointToAdd)) {
            this.officerPoint = pointToAdd;
        } else if (!conflict(pointToAdd)) {
            this.points.add(pointToAdd);
           // System.out.println("adding point: " + pointToAdd.x + ", " + pointToAdd.y);

        }
    }
    private void formationPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formationPanelMouseClicked
        // TODO add your handling code here:
        this.addPoint(evt.getX(), evt.getY(), evt.getModifiers());
        this.paintFormationsPanel();
    }//GEN-LAST:event_formationPanelMouseClicked

    public boolean conflict(Point pointToCheck) {
        boolean conflict = false;
        if (this.officerPoint != null) {
            conflict = this.officerPoint.distance(pointToCheck) < 4 * radius;
        }
        for (Point point : this.points) {
            if (point.distance(pointToCheck) < 4 * radius) {
                conflict = true;
                break;
            }
        }

        return conflict;
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.points.clear();
        this.officerPoint = null;

        this.paintFormationsPanel();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        BaseUnitFormation formation = new BaseUnitFormation(this.fileNameField.getText(), new Point(0, 0), points);
        formation.setOfficerPosition(officerPoint);

        try {
            FileOutputStream fileOut =
                    new FileOutputStream(fileNameField.getText() + ".ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(formation);
            out.close();
            fileOut.close();

        } catch (IOException i) {
            i.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void formationPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formationPanelMouseDragged
        this.addPoint(evt.getX(), evt.getY(), evt.getModifiers());
        this.paintFormationsPanel();
    }//GEN-LAST:event_formationPanelMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormationBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormationBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormationBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormationBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormationBuilder().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JPanel formationPanel;
    private javax.swing.JLabel pointCount;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox snapToGrid;
    // End of variables declaration//GEN-END:variables

   
}
