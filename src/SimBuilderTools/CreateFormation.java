/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package SimBuilderTools;

import UnitFormations.BaseUnitFormation;
import UnitFormations.PositionInFormation;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.InputEvent;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

/**
 *
 * @author Arlo
 */
public class CreateFormation extends AbstractCreationPanel<BaseUnitFormation> {

    ArrayList<Point> points;
    Point officerPoint;
    double radius;

    /**
     * Creates new form FormationBuilder
     */
    public CreateFormation() {
        initComponents();
        points = new ArrayList<>();
        this.officerPoint = new Point(1,1);
        radius = 3;

        // timer.start();
    }

    public void paintFormationsPanel() {
        BufferedImage formationImage =
                new BufferedImage(this.formationPanel.getWidth(),
                this.formationPanel.getHeight(), BufferedImage.TYPE_USHORT_555_RGB);
        Graphics2D g2 = formationImage.createGraphics();

        Rectangle fieldOutline = new Rectangle(0, 0, this.formationPanel.getWidth(),
                this.formationPanel.getHeight());
        g2.setColor(Color.WHITE);
        g2.draw(fieldOutline);

        g2.fill(fieldOutline);
        //this.formationPanel.repaint();
        g2.setColor(Color.BLACK);
        for (Point point : points) {

            Ellipse2D elipse = new Ellipse2D.Double(point.x, point.y, 2 * radius, 2 * radius);
            g2.draw(elipse);
            g2.fill(elipse);
        }
        g2.setColor(Color.red);
        if (this.officerPoint != null) {
            Ellipse2D elipse = new Ellipse2D.Double(this.officerPoint.x, this.officerPoint.y, 2 * radius, 2 * radius);
            g2.draw(elipse);
            g2.fill(elipse);

        }

        this.formationPanel.getGraphics().drawImage(formationImage, 0, 0, null);
        this.pointCount.setText("" + this.points.size());
        this.enableSave();
    }

    public boolean enableSave() {
        boolean enableSave = this.officerPoint != null
                && this.points.size() > 0
                && this.fileNameField.getText().length() > 0;
return enableSave;

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formationPanel = new javax.swing.JPanel();
        fileNameField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        pointCount = new javax.swing.JLabel();
        snapToGrid = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        setOrigin = new SimBuilderTools.SetCoordinates();
        jLabel2 = new javax.swing.JLabel();

        formationPanel.setBackground(new java.awt.Color(255, 255, 255));
        formationPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formationPanelMouseClicked(evt);
            }
        });
        formationPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formationPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout formationPanelLayout = new javax.swing.GroupLayout(formationPanel);
        formationPanel.setLayout(formationPanelLayout);
        formationPanelLayout.setHorizontalGroup(
            formationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        formationPanelLayout.setVerticalGroup(
            formationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        fileNameField.setText("testFormation");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        pointCount.setText("0");

        snapToGrid.setText("SnapToGrid");
        snapToGrid.setToolTipText("");

        jLabel1.setText("Origin:");

        jLabel2.setText("Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(clearButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(snapToGrid)
                            .addComponent(pointCount))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(formationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(pointCount)
                        .addGap(18, 18, 18)
                        .addComponent(snapToGrid))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formationPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formationPanelMouseClicked
        // TODO add your handling code here:
        this.addPoint(evt.getX(), evt.getY(), evt.getModifiers());
        this.paintFormationsPanel();
    }//GEN-LAST:event_formationPanelMouseClicked

    private void formationPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formationPanelMouseDragged
        this.addPoint(evt.getX(), evt.getY(), evt.getModifiers());
        this.paintFormationsPanel();
    }//GEN-LAST:event_formationPanelMouseDragged

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.points.clear();
        this.officerPoint = null;

        this.paintFormationsPanel();
    }//GEN-LAST:event_clearButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JPanel formationPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel pointCount;
    private SimBuilderTools.SetCoordinates setOrigin;
    private javax.swing.JCheckBox snapToGrid;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Save() {
         BaseUnitFormation formation = this.buildObject();

        try {
            FileOutputStream fileOut =
            new FileOutputStream(fileNameField.getText() + ".ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(formation);
            out.close();
            fileOut.close();

        } catch (IOException i) {
            i.printStackTrace();
        }
    }

    @Override
    public void Load() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean Validate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public BaseUnitFormation buildObject() {
       BaseUnitFormation formation = new BaseUnitFormation(this.fileNameField.getText(), this.setOrigin.getPoint(), points);
        formation.setOfficerPosition(officerPoint);
        return formation;
    }

    @Override
    public void setObject(BaseUnitFormation object) {
        this.setOrigin.setPoint(object.getFormationOrigin());
        this.points.clear();
        for (PositionInFormation position : object.getPointsInFormation())
        {
            this.points.add(position.getLocationWithinFormation());
        }
        this.officerPoint = object.getOfficersPosition().getLocationWithinFormation();
    }
    
    
    private void addPoint(int x, int y, int modifiers) {
        Point pointToAdd = new Point(x, y);

        if (this.snapToGrid.isSelected()) {
            pointToAdd.x = pointToAdd.x - (int) Math.round(pointToAdd.x % (4 * this.radius));
            pointToAdd.y = pointToAdd.y - (int) Math.round(pointToAdd.y % (4 * this.radius));

        }

        if ((modifiers & InputEvent.SHIFT_MASK) != 0 && !conflict(pointToAdd)) {
            this.officerPoint = pointToAdd;
        } else if (!conflict(pointToAdd)) {
            this.points.add(pointToAdd);
           // System.out.println("adding point: " + pointToAdd.x + ", " + pointToAdd.y);

        }
    }

    public boolean conflict(Point pointToCheck) {
        boolean conflict = false;
        if (this.officerPoint != null) {
            conflict = this.officerPoint.distance(pointToCheck) < 4 * radius;
        }
        for (Point point : this.points) {
            if (point.distance(pointToCheck) < 4 * radius) {
                conflict = true;
                break;
            }
        }

        return conflict;
    }
                        

}
